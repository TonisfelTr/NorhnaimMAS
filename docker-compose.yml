services:
    laravel.test:
        build:
            context: ./vendor/laravel/sail/runtimes/8.3
            dockerfile: Dockerfile
            args:
                WWWGROUP: '${WWWGROUP}'
        image: sail-8.3/app
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        ports:
            - '8080:80'
            - '${VITE_PORT:-5175}:${VITE_PORT:-5173}'
        environment:
            WWWUSER: '${WWWUSER}'
            LARAVEL_SAIL: 1
            XDEBUG_MODE: '${SAIL_XDEBUG_MODE:-off}'
            XDEBUG_CONFIG: '${SAIL_XDEBUG_CONFIG:-client_host=host.docker.internal}'
            IGNITION_LOCAL_SITES_PATH: '${PWD}'
        volumes:
            - '.:/var/www/html'
        networks:
            - sail
        depends_on:
            - pgsql
            - rabbitmq
            - redis

    laravel.worker:
        build:
            context: ./vendor/laravel/sail/runtimes/8.3
            dockerfile: Dockerfile
            args:
                WWWGROUP: '${WWWGROUP}'
        image: sail-8.3/worker
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        environment:
            WWWUSER: '${WWWUSER}'
            LARAVEL_SAIL: 1
        volumes:
            - '.:/var/www/html'
        networks:
            - sail
        depends_on:
            - rabbitmq
        command: php artisan queue:work rabbitmq --queue=${RABBITMQ_QUEUE:-default} --sleep=3 --tries=3 --timeout=90
        restart: always

    pgsql:
        image: 'postgres:15'
        ports:
            - '${FORWARD_DB_PORT:-5432}:5432'
        environment:
            PGPASSWORD: '${DB_PASSWORD:-secret}'
            POSTGRES_DB: '${DB_DATABASE}'
            POSTGRES_USER: '${DB_USERNAME}'
            POSTGRES_PASSWORD: '${DB_PASSWORD:-secret}'
        volumes:
            - 'sail-pgsql:/var/lib/postgresql/data'
            - './vendor/laravel/sail/database/pgsql/create-testing-database.sql:/docker-entrypoint-initdb.d/10-create-testing-database.sql'
        networks:
            - sail
        healthcheck:
            test: [ "CMD", "pg_isready", "-q", "-d", "${DB_DATABASE}", "-U", "${DB_USERNAME}" ]
            retries: 3
            timeout: 5s

    rabbitmq:
        image: 'rabbitmq:3-management-alpine'
        ports:
            - '5672:5672'
            - '15672:15672'
        environment:
            RABBITMQ_DEFAULT_USER: '${RABBITMQ_USER:-guest}'
            RABBITMQ_DEFAULT_PASS: '${RABBITMQ_PASSWORD:-guest}'
        networks:
            - sail
        healthcheck:
            test: rabbitmq-diagnostics -q ping
            retries: 3
            timeout: 5s

    redis:
        image: redis:7-alpine
        ports:
            - '${FORWARD_REDIS_PORT:-6379}:6379'
        volumes:
            - 'sail-redis:/data'
        command: [
            "redis-server",
            "--appendonly", "yes",          # AOF-персистентность
            "--maxmemory", "512mb",         # подбери под хост
            "--maxmemory-policy", "noeviction" # чтобы кэш не выталкивался
        ]
        networks:
            - sail

    pgadmin4:
        image: 'dpage/pgadmin4:latest'
        ports:
            - '5111:80'
        environment:
            PGPASSWORD: '${DB_PASSWORD:-secret}'
            POSTGRES_DB: '${DB_DATABASE}'
            POSTGRES_USER: '${DB_USERNAME}'
            POSTGRES_PASSWORD: '${DB_PASSWORD:-secret}'
            PGADMIN_DEFAULT_EMAIL: 'seintte@gmail.com'
            PGADMIN_DEFAULT_PASSWORD: 'password'
        volumes:
            - 'sail-pgsql:/var/lib/postgresql/data'
            - './vendor/laravel/sail/database/pgsql/create-testing-database.sql:/docker-entrypoint-initdb.d/10-create-testing-database.sql'
            - './init.sql:/docker-entrypoint-initdb.d/init.sql'
        networks:
            - sail
        healthcheck:
            test: [ "CMD", "pg_isready", "-q", "-d", "${DB_DATABASE}", "-U", "${DB_USERNAME}" ]
            retries: 3
            timeout: 5s

    ollama:
        image: ollama/ollama:latest
        container_name: ollama
        restart: unless-stopped
        ports:
            - "11434:11434"           # REST API
        volumes:
            - ollama-data:/root/.ollama
        networks:
            - sail
        # Разблочить на проде. Понадобится GPU для того, чтобы это всё работало быстро, т.к. нагрузка может быть огромной.
        # deploy:
        #   resources:
        #     reservations:
        #       devices:
        #         - capabilities: ["gpu"]

networks:
    sail:
        driver: bridge

volumes:
    sail-pgsql:
        driver: local
    ollama-data:
        driver: local
    sail-redis:
        driver: local
